<?xml version="1.0"?>
<robot name="freedom_vehicle" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="1.0"/>
  <xacro:property name="base_length" value="1.7"/>
  <xacro:property name="base_height" value="1.0"/>

  <xacro:property name="wheel_radius" value="0.25"/>
  <xacro:property name="wheel_width" value="0.10"/>
  <xacro:property name="wheel_ygap" value="0.3"/>
  <xacro:property name="wheel_zoff" value="0.50"/>
  <xacro:property name="wheel_xoff" value="0.42"/>

  <xacro:property name="wheel_friction" value="0.8"/>

  <xacro:property name="caster_xoff" value="0."/>
      <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <!-- <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/> -->
      <mass value="${m}"/>
      <inertia  ixx="${m*(w*w+h*h)/12}" ixy = "0" ixz = "0" iyy="${m*(d*d+h*h)/12}" iyz = "0" izz="${m*(d*d+h*h)/12}" /> 
      <!-- <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/> -->
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0" /> -->
      <mass value="${m}"/>
      <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0" iyy="${m*(3*r*r+h*h)/12}" iyz = "0" izz="${m*r*r/2}" /> 
      <!-- <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> -->
    </inertial>
  </xacro:macro>

    <!-- Robot Base -->
  <link name="base_link"/>


  
  <link name="chassibigga">
    <visual>
      <!-- <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/> -->
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </visual>
    <collision>
      <!-- <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/> -->
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="500" w="${base_width}" h="${base_height}" d="${base_length}"/>
  </link>

  <joint name="base_joint" type="fixed">
    <origin xyz="0 0 ${2*wheel_radius}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="chassibigga"/>
  </joint>

    <!-- Robot Footprint -->
  <link name="volante">
   <!-- <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${0.14}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual> -->
    <xacro:cylinder_inertia m="20" r="${wheel_radius}" h="${0.14}"/>
  </link>



  <joint name="steering_joint" type="revolute">
    <parent link="chassibigga"/>
    <child link="volante"/>
    <origin xyz=".0 0.0 ${-0.}" rpy="0 0 0"/>
    <limit upper="7.85" lower="-7.85" effort="100" velocity="1.0"/>
  </joint>

    <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> -->
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> -->
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="20" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="chassibigga"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="${pi/2} 0 ${pi}"/>
      <!-- <limit effort="100" velocity="100"/> -->
      <!-- <limit upper="0" lower="0" effort="30" velocity="5.0"/> -->
      <axis xyz="0 0 1"/>
    </joint>

    <!-- <joint name="${prefix}_joint1" type="revolute">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <limit upper="0" lower="0" effort="30" velocity="5.0"/>
      <axis xyz="0 0 1"/>
    </joint> -->
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />


    <!-- Caster Wheel -->
  <link name="front_caster">
    <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${0.14}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <!-- <collision>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${0.14}"/>
        </geometry>
    </collision> -->

    <xacro:cylinder_inertia m="20" r="${wheel_radius}" h="${0.14}"/>
  </link>

  <link name="front_spin_caster">
   <visual>
      <geometry>
        <cylinder radius="${wheel_radius}" length="${0.14}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
        <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> -->
        <geometry>
          <cylinder radius="${wheel_radius}" length="${0.14}"/>
        </geometry>
    </collision>
    <xacro:cylinder_inertia m="20" r="${wheel_radius}" h="${0.14}"/>
  </link>

  <joint name="caster_joint" type="revolute">
    <parent link="chassibigga"/>
    <child link="front_caster"/>
    <origin xyz="${base_length/2 + 0.5} 0.0 ${-(base_height/2)}" rpy="1.57 0 ${pi}"/>
    <limit upper=".7" lower="-.7" effort="100" velocity="1.0"/>
    <axis xyz="0 1 0"/>
  </joint>

    <joint name="caster_spin_joint" type="continuous">
    <parent link="front_caster"/>
    <child link="front_spin_caster"/>
    <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    <!-- <limit upper="-0.71" lower="0.71" effort="30" velocity="5.0"/> -->
    <!-- <limit effort="100" velocity="100"/> -->
    <axis xyz="0 0 1"/>
  </joint>


<!-- reboque -->

<link name="reboque">
<visual>
<!-- <origin xyz="-0.0 0.0 0.0" rpy="0 -0 0" /> -->
<geometry>
<!-- <mesh filename="package://freedom_vehicle/src/description/meshes/reboque.stl"/> -->
<box size="${base_length} ${base_width} ${0.5}"/>
</geometry>
</visual>
<collision>
<!-- <origin xyz="-0.0460447 0.0427166 0.099014" rpy="0 -0 0" /> -->
<geometry>
<!-- <mesh filename="package://freedom_vehicle/src/description/meshes/reboque.stl"/> -->
<box size="${base_length} ${base_width} ${0.5}"/>
</geometry>
</collision>
<inertial>
<mass value="10" />
<inertia ixx="218.624" ixy="3.67796e-08"  ixz="5.50912e-09" iyy="45.7427" iyz="-0.0231686" izz="238.636" />
</inertial>
</link>

<joint name="reboque_joint" type="revolute">
    <parent link="chassibigga"/>
    <child link="reboque"/>
    <origin xyz="-2.5 0.0 0" rpy="0 0 0"/>
    <limit upper=".7" lower="-.7" effort="100" velocity="1.0"/>
    <axis xyz="0 1 0"/>
</joint>


<xacro:macro name="wheel_rt" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> -->
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> -->
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="20" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="reboque"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="${pi/2} 0 ${pi}"/>
      <!-- <limit effort="100" velocity="100"/> -->
      <!-- <limit upper="0" lower="0" effort="30" velocity="5.0"/> -->
      <axis xyz="0 0 1"/>
    </joint>

    <!-- <joint name="${prefix}_joint1" type="revolute">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <limit upper="0" lower="0" effort="30" velocity="5.0"/>
      <axis xyz="0 0 1"/>
    </joint> -->
  </xacro:macro>

  <xacro:wheel_rt prefix="drivewhl_l_rt" x_reflect="-1" y_reflect="1" />
  <xacro:wheel_rt prefix="drivewhl_r_rt" x_reflect="-1" y_reflect="-1" />

  <xacro:macro name="wheel_rf" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> -->
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <!-- <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> -->
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="20" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="reboque"/>
      <child link="${prefix}_link"/>
      <origin xyz="${1+x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="${pi/2} 0 ${pi}"/>
      <!-- <limit effort="100" velocity="100"/> -->
      <!-- <limit upper="0" lower="0" effort="30" velocity="5.0"/> -->
      <axis xyz="0 0 1"/>
    </joint>

    <!-- <joint name="${prefix}_joint1" type="revolute">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <limit upper="0" lower="0" effort="30" velocity="5.0"/>
      <axis xyz="0 0 1"/>
    </joint> -->
  </xacro:macro>

  <xacro:wheel_rf prefix="drivewhl_l_rf" x_reflect="-1" y_reflect="1" />
  <xacro:wheel_rf prefix="drivewhl_r_rf" x_reflect="-1" y_reflect="-1" />

<!-- reboque -->


<!-- sensor -->

<link name="sensor_laser">
    <inertial>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <mass value="1" />
        <xacro:cylinder_inertia m="1" r="0.05" h="0.1" />
    </inertial>

    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
        <cylinder radius="0.05" length="0.1"/>
        </geometry>
        <material name="black" />
    </visual>

    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
        <cylinder radius="0.05" length="0.1"/>
        </geometry>
    </collision>
</link>

    <joint name="joint_sensor_laser" type="fixed">
    <origin xyz="${1.7/2} 0 0.05" rpy="0 0 0"/>
    <parent link="chassibigga"/>
    <child link="sensor_laser"/>
  </joint>

  <gazebo reference="sensor_laser">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/m2wr/laser/scan</topicName>
        <frameName>sensor_laser</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <xacro:property name="camera_link" value="0.05" />

  <!-- Camera -->
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <material name="red"/>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="${1.7/2} 0 0.15" rpy="0 0 0"/>
    <parent link="chassibigga"/>
    <child link="camera_link"/>
  </joint>






  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rrbot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

<!-- sensor -->


<gazebo>


<plugin name="gazebo_ros_ackermann_drive" filename="libgazebo_ros_ackermann_drive.so">
  <ros>
    <namespace>demo</namespace>
    <remapping>cmd_vel:=cmd_demo</remapping>
    <remapping>odom:=odom_demo</remapping>
    <remapping>distance:=distance_demo</remapping>
  </ros>

  <update_rate>10.0</update_rate>

  <front_left_joint>caster_spin_joint</front_left_joint>
  <front_right_joint>caster_spin_joint</front_right_joint>
  <rear_left_joint>drivewhl_l_joint</rear_left_joint>
  <rear_right_joint>drivewhl_r_joint</rear_right_joint>
  <left_steering_joint>caster_joint</left_steering_joint>
  <right_steering_joint>caster_joint</right_steering_joint>
  <steering_wheel_joint>steering_joint</steering_wheel_joint>

  <max_steer>0.6458</max_steer>

  <max_steering_angle>7.85</max_steering_angle>

  <max_speed>20</max_speed>

  <left_steering_pid_gain>1500 0 1</left_steering_pid_gain>
  <left_steering_i_range>0 0</left_steering_i_range>
  <right_steering_pid_gain>1500 0 1</right_steering_pid_gain>
  <right_steering_i_range>0 0</right_steering_i_range>
  <linear_velocity_pid_gain>1000 0 1</linear_velocity_pid_gain>
  <linear_velocity_i_range>0 0</linear_velocity_i_range>

  <publish_odom>true</publish_odom>
  <publish_odom_tf>true</publish_odom_tf>
  <publish_wheel_tf>true</publish_wheel_tf>
  <publish_distance>true</publish_distance>
  <odometry_frame>odom_demo</odometry_frame>
  <robot_base_frame>chassibigga</robot_base_frame>
</plugin>


</gazebo>




</robot>